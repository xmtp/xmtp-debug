import { TestCase } from '../test_generator_v2'

export class TypeScriptGenerator {
  testCases: any

  constructor(testCases: any) {
    this.testCases = testCases
  }

  // Generate follows the pattern:
  // - Wrap the entire thing in a function with test[testName]
  // - Preconditions become a section that has a failing assert with the preconditions listed as comments
  // - Input becomes a section with assignments (const key = value)
  // - Output becomes a section that has a failing assert with the output listed as comments
  //   - The only difference is 'throwComment_*' keys become comments, but the rest are commented asserts
  //   so ['address', '0x00'] becomes "// assert.equal(address, '0x00')"
  generateTestCaseCode(testName: string, testCase: TestCase) {
    const preconditions = testCase.preconditions
    const input = testCase.input
    const outputConditions = testCase.outputConditions

    let code = ''
    code += `test['${testName}'] = async function() {\n`
    if (preconditions) {
      code += `  // Preconditions:\n`
      for (let [key, value] of Object.entries(preconditions)) {
        code += `  // ${key}: ${value}\n`
      }
    } else {
      code += `  // No preconditions\n`
    }
    code += '\n\n'
    if (input) {
      code += `  // Inputs:\n`
      for (let [key, value] of Object.entries(input)) {
        code += `  const ${key} = ${value}\n`
      }
    } else {
      code += `  // No input\n`
    }
    code += '\n\n'
    code += `  // Expected outputs:\n`
    for (let [outputKey, expectedOutputFields] of Object.entries(
      outputConditions
    )) {
      // Add section comment like "// Testing output: outputKey"
      code += `  // Testing output object: ${outputKey}\n`
      // Add a failing assert or comment for each key/value pair
      for (let [key, value] of Object.entries(expectedOutputFields as any)) {
        if (key.startsWith('throwComment_')) {
          code += `  // ${value}\n`
        } else {
          code += `  assert.equal(${key}, ${value})\n`
        }
      }
    }
    code += `}\n`
    return code
  }

  generate() {
    let code = ''
    // Add comment at top with the generator version
    code += `// Generated by test_generator_v2.ts\n`
    for (let [testName, test] of Object.entries(this.testCases)) {
      code += this.generateTestCaseCode(testName, test as TestCase)
    }
    return code
  }
}
